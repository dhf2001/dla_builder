- [ ] Fix confusion re: translation/rotation order in BoundingBox constructor
- [ ] Make all vector operations work with both normal and homogeneous coordinates
- [ ] Use ConvexHull rather than extent - implement ConvexHull#(axis_aligned_)bounding_box
- [ ] DRY the top corner -> center coordinate system transformation
- [ ] Convert the assertions that used to be in linear_grower_test to integration tests
- [ ] Figure out where Renderer belongs and if it should be tested
- [ ] Make QuadtreeClosestParticleFinder#closest_particle yield the found particle rather than return it
- [ ] Audit convenience constructors to minimize new object creation
- [ ] Audit bracket initializers -- remove where there isn't much value
- [ ] Factor out tree structure responsibility from the Particle class
- [ ] Rename PolygonNode -> PolygonVertex
- [ ] Rename Ray -> Line (it's really the parametric representation of a line)
- [ ] Consider making an Interval class to replace the use of Range
- [ ] Consider using an R-tree for particle index
- [ ] Make a shared example group for bounding boxes
- [ ] Make shared example group for vector-like assertions
- [ ] Use Array#combination for assert_cyclically_equal implementation
- [ ] Make a delta matcher for Matrix/Vector/Point
- [ ] Expose methods from service objects as class methods
- [ ] Figure out a slicker way of accepting various proc arity for dla visitors
- [ ] Make BoundingBoxFinder more functional by taking work out of the initializer
- [ ] Use Translation wherever rotation/offset pairs are used
- [ ] Start using minispec-stub-const everywhere

- [ ] Consider factoring out linked list behavior from DCEL::Edge
- [ ] Factor out the creation of enumerators for linked list type objects
- [ ] Implement all enumerators for DCEL::Edge
- [ ] Implement all neighborhood accessors for DCEL::Edge
- [ ] Figure out how to remove duplication between Polygon and DCEL::Face (they have similar responsibilities)
- [ ] Create a MeshOperation class to represent atomic changes to faces/edges/vertices
- [ ] Pull DCEL::Face::FaceBuilder out to its own file
- [ ] See if we can change Ray#point_to_the_left? so that it will work with Triangulation::Face#contains?
